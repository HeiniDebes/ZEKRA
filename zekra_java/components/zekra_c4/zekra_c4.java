package xjsnark.zekra_c4;

/*Generated by MPS */

import backend.structure.CircuitGenerator;
import backend.config.Config;
import backend.eval.SampleRun;
import java.math.BigInteger;
import backend.auxTypes.FieldElement;
import backend.auxTypes.UnsignedInteger;
import backend.auxTypes.SmartMemory;
import util.Util;
import backend.eval.CircuitEvaluator;

public class zekra_c4 extends CircuitGenerator {



  public static void main(String[] args) {
    Config.inputVerbose = false;
    Config.outputVerbose = false;
    Config.writeCircuits = false;
    new zekra_c4();
  }

  public zekra_c4() {
    super("zekra_c4");
    __generateCircuit();
    this.__evaluateSampleRun(new SampleRun("Sample_Run1", true) {
      public void pre() {
        for (int i = 0; i < EXECUTION_PATH_SIZE; i++) {
          EXECUTION_PATH[i][0].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          EXECUTION_PATH[i][1].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          EXECUTION_PATH[i][2].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          NUMIFIED_EXECUTION_PATH[i][0].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          NUMIFIED_EXECUTION_PATH[i][1].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          TRANSLATION_HINTS[i][0].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
          TRANSLATION_HINTS[i][1].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        }
        for (int i = 0; i < ADJLIST_SIZE + 1; i++) {
          TRANSLATOR[i].mapValue(BigInteger.ONE, CircuitGenerator.__getActiveCircuitGenerator().__getCircuitEvaluator());
        }
      }
      public void post() {
      }

    });

  }



  public void __init() {
    EXECUTION_PATH = (FieldElement[][]) FieldElement.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{EXECUTION_PATH_SIZE, 3}, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    NUMIFIED_EXECUTION_PATH = (FieldElement[][]) FieldElement.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{EXECUTION_PATH_SIZE, 2}, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    TRANSLATOR = (FieldElement[]) FieldElement.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{ADJLIST_SIZE + 1}, new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    TRANSLATION_HINTS = (UnsignedInteger[][]) UnsignedInteger.createZeroArray(CircuitGenerator.__getActiveCircuitGenerator(), new int[]{EXECUTION_PATH_SIZE, 2}, 11);
  }

  private FieldElement[][] EXECUTION_PATH;
  private FieldElement[][] NUMIFIED_EXECUTION_PATH;
  private FieldElement[] TRANSLATOR;
  private UnsignedInteger[][] TRANSLATION_HINTS;
  private SmartMemory<FieldElement> translatorMem;

  private static int ADJLIST_SIZE = 100;
  private static int EXECUTION_PATH_SIZE = 30;
  @Override
  public void __defineInputs() {
    super.__defineInputs();















  }
  @Override
  public void __defineVerifiedWitnesses() {
    super.__defineVerifiedWitnesses();





    EXECUTION_PATH = (FieldElement[][]) FieldElement.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(EXECUTION_PATH), new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    NUMIFIED_EXECUTION_PATH = (FieldElement[][]) FieldElement.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(NUMIFIED_EXECUTION_PATH), new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
    TRANSLATOR = (FieldElement[]) FieldElement.createVerifiedWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(TRANSLATOR), new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"));














  }
  @Override
  public void __defineWitnesses() {
    super.__defineWitnesses();





    TRANSLATION_HINTS = (UnsignedInteger[][]) UnsignedInteger.createWitnessArray(CircuitGenerator.__getActiveCircuitGenerator(), Util.getArrayDimensions(TRANSLATION_HINTS), 11);












  }
  public void outsource() {
    translatorMem = new SmartMemory(TRANSLATOR, FieldElement.__getClassRef(), new Object[]{"21888242871839275222246405745257275088548364400416034343698204186575808495617"});

    // //////////////////////////// 
    // Then verify that the translation of the raw execution path to the numified execution path was done correctly 
    // NOTE: this component prevents feeding isomorphic graphs by including the translation in the proof 
    for (int i = 0; i < EXECUTION_PATH_SIZE; i++) {
      translatorMem.read(TRANSLATION_HINTS[i][0]).forceEqual(EXECUTION_PATH[i][1]);
      translatorMem.read(TRANSLATION_HINTS[i][1]).forceEqual(EXECUTION_PATH[i][2]);
      FieldElement.instantiateFrom(new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"), TRANSLATION_HINTS[i][0]).forceEqual(NUMIFIED_EXECUTION_PATH[i][0]);
      FieldElement.instantiateFrom(new BigInteger("21888242871839275222246405745257275088548364400416034343698204186575808495617"), TRANSLATION_HINTS[i][1]).forceEqual(NUMIFIED_EXECUTION_PATH[i][1]);
    }
  }

  public void __generateSampleInput(CircuitEvaluator evaluator) {
    __generateRandomInput(evaluator);
  }

}
